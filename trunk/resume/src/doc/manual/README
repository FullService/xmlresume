Quick start
===========

To generate all doc formats (output to $PROJECTROOT/build/doc/manual):
 - Go to the project root directory and type "ant doc.manual".

 If you have "ant" aliased to "ant -find build.xml", you can just run it from
 here.

This assumes that you have:
 - A Java interpreter
 - Apache Ant
 - Saxon-Java (I can't get Xalan to work with multi-file [chunked] output)
 - Lynx (for text documentation generation from HTML)
 - Python 2.1 with XML libraries (for build scripting, notably DTD structure
   extraction and automatic documentation generation [try saying that three
   times fast!])

To remove generated files, run "ant clean.doc".

To build formats individually, use the following Ant targets:
 - doc.manual.html-single
 - doc.manual.html-multiple
 - doc.manual.text

To use different tools, or if your tools aren't in your path/classpath, you'll
need to edit build.xml.

You might also want to run scripts/dtddoc.py (see below for more info).

Manual Contents
===============

The manual, written in DocBook XML 4.1.2, consists of:
 - Introduction -- Brief explanation of the project and the manual
 - Getting Started Guide -- how to download, install, and use xmlresume.
 - Element Reference -- Information on the syntax and semantics of xmlresume
   documents.
 - Parameter Reference -- Information on the user-configurable parameters
 - CSS Class Reference -- Info on CSS classes available in HTML output
 - Glossary -- Duh.

Directory Contents
==================

This directory contains:
manual.xml:
 - The top-level manual file, in DocBook format
css:
 - A CSS stylesheet used to display the HTML version of the manual
en:
 - English-language manual content
entities:
 - divisions.ent: Entities for files included elsewhere in the manual
 - global.ent: Entities for content (phrases, words, etc.)
scripts:
 - dtddoc.py --check: checks consistency of element reference and DTD (makes
   sure there is exactly one documentation file for each element defined in
   the DTD). Run it with --create-missing to create missing files.
 - dtddoc.py --filter: extracts information from the DTD and inserts it
   automatically into documentation files (with --filter). This script is
   called automatically by Ant during the build process.
 - dir2entities.py: used to automatically generate XML entities from all
   files in a directory (cuts down on the number of places you have to edit
   to add or remove a new element or parameter to or from the manual). Called
   by Ant during the build.
 - fix_cdata_space.py: removes all leading and trailing space from the
   contents of <![CDATA[ ... ]]> sections. Allows DocBook source code to be
   formatted nicely, while having output also look nice. (Called automatically
   by Ant during the build process.)

Other output formats, such as RTF and PostScript are possible, but not
implemented.  They use DSSSL instead of XSL stylesheets, and require an entirely
different tool chain (sp, jade, jadetex, dvips, etc.)

Original author: Bruce Christensen <bruce at iname.com>
